services:
  #nginx
  web: 
    image: nginx:latest
    ports:
      - "1080:80"
    volumes:
      - ./nginx/conf.d/default.conf:/etc/nginx/conf.d/default.conf
  
  #php
  app:
    build:
        dockerfile: ./php/Dockerfile
        target: app_dev
    volumes:
        - ./app:/var/www/html
        - ./php/conf.d/xdebug.ini:/usr/local/etc/php/conf.d/xdebug.ini:ro
    environment:
        MYSQL_HOST: db
        MYSQL_PORT: ${MYSQL_PORT}
        MYSQL_PASSWORD: ${MYSQL_PASSWORD}
        MYSQL_DATABASE: ${MYSQL_DATABASE}
        MYSQL_USER: ${MYSQL_USER}
        REDIS_HOST: cache
        REDIS_PORT: ${REDIS_PORT}
        XDEBUG_MODE: "${XDEBUG_MODE:-off}" # See https://xdebug.org/docs/all_settings#mode
    extra_hosts:
        # Ensure that host.docker.internal is correctly defined on Linux
        - host.docker.internal:host-gateway

  #mysql
  db:
      image: mysql:8.0
      volumes:
          - mysqldata:/var/lib/mysql
      ports:
          - "3305:3306"
      restart: unless-stopped # This will restart if things go wrong but will stop when asked
      environment:
          MYSQL_ROOT_PASSWORD: ${MYSQL_PASSWORD}
          MYSQL_USER: ${MYSQL_USER}
          MYSQL_PASSWORD: ${MYSQL_PASSWORD}
          MYSQL_DATABASE: ${MYSQL_DATABASE} 
          
  #redis
  cache:
      image: redis:latest


# docker will decide the best place to host this data
volumes:
  mysqldata:


  # commands:
  # 1. docker ps | docker compose ps
  # 2. docker compose up -d
  # 3. docker build -t omerfarooq:php81 -f php/Dockerfile . ## This will build the image using Dockerfile
  # 4. docker images ## shows the built images
  # 5. docker exec -it [container] sh ## logs into the container shell
  # 6. docker compose up --build -d ## This rebuilds the image again, and needs to be run after composer is setup
  # 7. docker compose down -v ## stops container and also removes volumes
  # 8. docker compose -f docker-compose.dev.yaml up --build -d # to run docker compose dev file.
  # 9. docker compose -f docker-compose.dev.yaml up --env-file .env -d # to run docker compose dev file with multiple env files.
  # 10. XDEBUG_MODE=debug docker compose -f docker-compose.dev.yaml up -d # To run xdebug in debug mode